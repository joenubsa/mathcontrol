<?phprequire __DIR__ . "/../../data/db.php";class progresoModel {    private $result;    private $primaryTable;    function __construct($active) {        $active ? true : die('ACCESS DENIED');        $this->dbo = new db();        $this->primaryTable = "articulo";    }    private $dbo;    public function consultar($P) {        $this->dbo->conectar();        if (isset($P['_conse']) && !is_numeric($P['_conse'])) {            $this->setResult('Error al consultar el registro', 'error');            return false;        }        $consulta = "";        $tipo = $P["tipo"];        switch ($tipo) {            case "articulo_actual":                $articuloActual = $this->consultaArticuloActual($P);                if (!$articuloActual) {                    $this->setResult("No se econtraron artÃ­culos", "error");                    return false;                }                $consulta = "select * from articulo where id=" . $articuloActual;                break;        }        $res = $this->dbo->consultar($consulta);        $this->dbo->desconectar();        if ($this->dbo->getError() === null) {            $this->setResult($res, 'data');        } else {            $this->setResult("Ha ocurrido un error en la consulta", "error");            return false;        }        return true;    }    public function guardar($P) {        $consulta = "insert into $this->primaryTable(                                            nombre                                            ,descripcion                                            ,modulo_id                                            ,articulo_id                                            ,fechaRegistro                                            ,estado                                                                                        )                              values('" . $P["nombre"] . "',                                            '" . $P["descripcion"] . "',                                            '" . $P["modulo_id"] . "',                                            '" . $P["articulo_id"] . "',                                            '" . date('Y-m-d H:i:s') . "',                                            'A'                                            )										                                    ";        $this->dbo->conectar();        if (!$this->dbo->ejecutar($consulta)) {            $this->setResult('Error al guardar el registro', 'error');        } else {            $this->setResult($this->dbo->getInsertedID(), 'id');        }        $this->dbo->desconectar();        return true;    }    public function editar($P) {        if (!is_numeric($P['id'])) {            $this->setResult('No se encuentra identificador', 'error');            return false;        }        $consulta = "update $this->primaryTable set                             nombre = '" . $P['nombre'] . "'                            ,descripcion = '" . $P['descripcion'] . "'                            ,modulo_id = '" . $P['modulo_id'] . "'                            ,estado = '" . $P['estado'] . "'            where id= " . $P['id'] . "                    ";        $this->dbo->conectar();        if (!$this->dbo->ejecutar($consulta)) {            $this->setResult('Error al editar el registro', 'error');        } else {            $this->setResult($this->dbo->getInsertedID(), 'ok');        }        $this->dbo->desconectar();        return true;    }    public function borrar($P) {        if (!is_numeric($P['id'])) {            $this->setResult('Error al borrar el registro', 'error');            return false;        }        $consulta = "update $this->primaryTable set estado = 'I'                                        where id= " . $P['id'] . "                    ";        $this->dbo->conectar();        if (!$this->dbo->ejecutar($consulta)) {            $this->setResult('Error al editar el registro', 'error');        } else {            $this->setResult($this->dbo->getInsertedID(), 'ok');        }        $this->dbo->desconectar();    }    public function setResult($output, $type = "message") {        $this->result = [            "type" => $type,            "output" => $output        ];        return true;    }    public function getResult() {        return $this->result;    }    private function consultaArticuloActual($p) {        $params = json_decode($p["params"]);        $usuario_id = $_SESSION["usuario_id"];        $flujo_id = $this->convertirModuloAFlujo($params->modulo);        $this->inicializarModulosUsuario();        $ultimoArticuloRevisadoQuery = "select articulo_id, calificacion from usuario_articulo where usuario_id = " . $usuario_id . " order by fechaRegistro desc limit 1";        $ultimoArticuloRevisado = $this->dbo->consultar($ultimoArticuloRevisadoQuery);        var_dump($ultimoArticuloRevisado);         exit;        $articulo_id = null;        if (count($ultimoArticuloRevisado) === 0) {            $articuloActualQuery = "select articulo_hito from flujo_articulo                 where flujo_id = " . $flujo_id . "                 order by articulo_hito";            $articuloActual = $this->dbo->consultar($articuloActualQuery);            if (count($articuloActual) > 0) {                $articulo_id = $articuloActual[0]["articulo_hito"];                $this->insertarUsuarioArticulo($articulo_id);            } else {                return false;            }        } else {            $calificacion = (int) $ultimoArticuloRevisado[0]['calificacion'];            $articulo_actual = $ultimoArticuloRevisado[0]["articulo_id"];            if ($calificacion < 60) {                $articulo_id_revisado = $ultimoArticuloRevisado[0]['articulo_id'];                $articuloQuery = "select articulo_hito from flujo_articulo                     where flujo_id = " . $flujo_id . "                     and articulo_hito = " . $articulo_id_revisado . "                    order by articulo_hito";                                $articulo = $this->dbo->consultar($articuloQuery);                if (count($articulo) > 0){                    $articulo_id = $articulo[0]["articulo_hito"];                                    } else {                    return false;                }                            } else {                $siguienteArticuloQuery = "select articulo_hito from flujo_articulo                     where flujo_id = " . $flujo_id . " and articulo_hito > " . $articulo_actual . " order by fechaRegistro desc limit 1";                $siguienteArticulo = $this->dbo->consultar($siguienteArticuloQuery);                if (count($siguienteArticulo) > 0) {                    $articulo_id = $siguienteArticulo[0]["articulo_hito"];                    $this->insertarUsuarioArticulo($articulo_id);                } else {                    return false;                }            }        }        return $articulo_id;    }    private function inicializarModulosUsuario() {        $perfil = $_SESSION["perfil"];        $usuario_id = $_SESSION["usuario_id"];        $consulta = "select id from usuario_flujo";        $flujosAsociados = $this->dbo->consultar($consulta);        if (count($flujosAsociados) === 0) {            $flujosActivosQuery = "select id from flujo where estado = 'A' and nombre <> 'Sugerencias' and grupo = '" . $perfil . "'";            $flujosActivos = $this->dbo->consultar($flujosActivosQuery);            foreach ($flujosActivos as $flujo) {                $insertarFlujo = "insert into usuario_flujo (                    terminado                    ,usuario_id                    ,flujo_id                    ,porcentaje                                        )                    values (                    0                    ," . $usuario_id . "                    ," . $flujo['id'] . "                    ,0                    )                    ";                $this->dbo->ejecutar($insertarFlujo);            }        }    }    private function convertirModuloAFlujo($modulo) {        $modulo_id = null;        $perfil = $_SESSION["perfil"];        switch ($modulo) {            case "cmdMod_0":                $modulo_id = 1;                break;            case "cmdMod_1":                $modulo_id = 2;                break;            case "cmdMod_2":                $modulo_id = 3;                break;            case "cmdMod_3":                $modulo_id = 4;                break;            case "cmdMod_4":                $modulo_id = 5;                break;            default:                echo "Modulo no encontrado";                break;        }        $flujoQuery = "select id from flujo where modulo_id = " . $modulo_id . " and grupo = '" . $perfil . "' and estado='A'";        $flujo = $this->dbo->consultar($flujoQuery);        return $flujo[0]['id'];    }    private function insertarUsuarioArticulo($articulo_id) {        $usuario_id = $_SESSION["usuario_id"];        $fechaRegistro = date('Y-m-d H:i:s');        $consulta = "insert into usuario_articulo (usuario_id, articulo_id, fechaInicio, fechaRegistro)                            values (" . $usuario_id . ", " . $articulo_id . ", '" . $fechaRegistro . "', '" . $fechaRegistro . "')            ";        $this->dbo->ejecutar($consulta);    }    public function avanzarAction($P) {        $this->dbo->conectar();        $articulo_id = $P['articulo_id'];        $usuario_id = $_SESSION["usuario_id"];        //validar cuestionarios        $cuestionariosQuery = "select id from cuestionario where articulo_id = " . $articulo_id;        $cuestionarios = $this->dbo->consultar($cuestionariosQuery);        $cuestionariosPendientes = false;        $calificacionTotal = 0;        $numeroCuestionarios = 0;        if (count($cuestionarios) > 0) {            foreach ($cuestionarios as $cuestionario) {                $cuestionariosResueltosQuery = "select id from usuario_cuestionario where cuestionario_id=" . $cuestionario['id'] . " and usuario_id=" . $usuario_id;                $cuestionariosResueltos = $this->dbo->consultar($cuestionariosResueltosQuery);                if (count($cuestionariosResueltos) === 0) {                    $cuestionariosPendientes = true;                    break;                } else {                    if ($cuestionariosResueltos[0]['calificacion'] < 60) {                        $cuestionariosPendientes = true;                        break;                    } else {                        $calificacionTotal+=$cuestionariosResueltos[0]['calificacion'];                    }                }                $numeroCuestionarios++;            }        }        $calificacionPromedio = $numeroCuestionarios > 0 ? ((int) ($calificacionTotal / $numeroCuestionarios)) : 100;        if (!$cuestionariosPendientes) {            $actualizarUsuarioArticuloQuery = "update usuario_articulo set                     calificacion = " . $calificacionPromedio . ",                    fechaFinal = '" . date('Y-m-d H:i:s') . "'                where articulo_id = " . $articulo_id . "                 and usuario_id = " . $usuario_id . "                                                          ";            $this->dbo->ejecutar($actualizarUsuarioArticuloQuery);        }        $this->setResult(!$cuestionariosPendientes, "data");        $this->dbo->desconectar();        return true;    }}