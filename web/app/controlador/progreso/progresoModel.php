<?phprequire __DIR__ . "/../../data/db.php";class progresoModel {    private $result;    private $primaryTable;    function __construct($active) {        $active ? true : die('ACCESS DENIED');        $this->dbo = new db();        $this->primaryTable = "articulo";    }    private $dbo;    public function consultar($P) {        $this->dbo->conectar();        if (isset($P['_conse']) && !is_numeric($P['_conse'])) {            $this->setResult('Error al consultar el registro', 'error');            return false;        }        $consulta = "";        $tipo = $P["tipo"];        $params = null;        if (isset($P["params"])) {            $params = json_decode($P["params"]);        }        switch ($tipo) {            case "articulo_actual":                $articuloActual = $this->consultaArticuloActual($P);                if (!$articuloActual) {                    $this->setResult("Ya has terminado este mÃ³dulo", "error");                    return false;                }                $consulta = "select art.*, flar.sucesor_positivo, flar.sucesor_alternativo, flar.nombre_opciones from articulo art                     left join flujo_articulo flar on flar.articulo_hito = art.id                    where art.id=" . $articuloActual;                break;            case "verificar_cuestionario":                $consulta = "select * from cuestionario where articulo_id = " . $params->articulo_id . " and estado='A'";                break;            case "traer_cuestionario":                $consulta = "select * from cuestionario where articulo_id = " . $params->articulo_id . " and estado='A'";                                break;            case "verificar_foro":                $consulta = "select * from foro where articulo_id = " . $params->articulo_id;                break;            case "renderizar_menu":                $consulta = $this->renderizarMenuQuery($P);                break;            case "foro_social":                $consulta = "select concat(usu.nombre, ' ', usu.apellido) as nombre_estudiante, usfo.* from usuario_foro usfo                     inner join usuario usu on usu.id = usfo.usuario_id                    where foro_id = " . $params->foro_id;                break;        }        $res = $this->dbo->consultar($consulta);        $this->dbo->desconectar();        if ($this->dbo->getError() === null) {            $this->setResult($res, 'data');        } else {            $this->setResult("Ha ocurrido un error en la consulta", "error");            return false;        }        return true;    }    public function guardar($P) {        $consulta = "insert into $this->primaryTable(                                            nombre                                            ,descripcion                                            ,modulo_id                                            ,articulo_id                                            ,fechaRegistro                                            ,estado                                                                                        )                              values('" . $P["nombre"] . "',                                            '" . $P["descripcion"] . "',                                            '" . $P["modulo_id"] . "',                                            '" . $P["articulo_id"] . "',                                            '" . date('Y-m-d H:i:s') . "',                                            'A'                                            )										                                    ";        $this->dbo->conectar();        if (!$this->dbo->ejecutar($consulta)) {            $this->setResult('Error al guardar el registro', 'error');        } else {            $this->setResult($this->dbo->getInsertedID(), 'id');        }        $this->dbo->desconectar();        return true;    }    public function editar($P) {        if (!is_numeric($P['id'])) {            $this->setResult('No se encuentra identificador', 'error');            return false;        }        $consulta = "update $this->primaryTable set                             nombre = '" . $P['nombre'] . "'                            ,descripcion = '" . $P['descripcion'] . "'                            ,modulo_id = '" . $P['modulo_id'] . "'                            ,estado = '" . $P['estado'] . "'            where id= " . $P['id'] . "                    ";        $this->dbo->conectar();        if (!$this->dbo->ejecutar($consulta)) {            $this->setResult('Error al editar el registro', 'error');        } else {            $this->setResult($this->dbo->getInsertedID(), 'ok');        }        $this->dbo->desconectar();        return true;    }    public function borrar($P) {        if (!is_numeric($P['id'])) {            $this->setResult('Error al borrar el registro', 'error');            return false;        }        $consulta = "update $this->primaryTable set estado = 'I'                                        where id= " . $P['id'] . "                    ";        $this->dbo->conectar();        if (!$this->dbo->ejecutar($consulta)) {            $this->setResult('Error al editar el registro', 'error');        } else {            $this->setResult($this->dbo->getInsertedID(), 'ok');        }        $this->dbo->desconectar();    }    public function setResult($output, $type = "message") {        $this->result = [            "type" => $type,            "output" => $output        ];        return true;    }    public function getResult() {        return $this->result;    }    private function consultaArticuloActual($p) {                $params = json_decode($p["params"]);        $usuario_id = $_SESSION["usuario_id"];        $flujo_id = $this->convertirModuloAFlujo($params->modulo);        $this->inicializarModulosUsuario();        $ultimoArticuloRevisadoQuery = "select usar.articulo_id, usar.calificacion                                             from usuario_articulo usar                                                                                        inner join articulo art on usar.articulo_id = art.id                                            inner join flujo flu on flu.modulo_id = art.modulo_id                                            where usar.usuario_id = " . $usuario_id . "                                                 and flu.id = " . $flujo_id . "                                            order by usar.fechaRegistro desc limit 1";        $ultimoArticuloRevisado = $this->dbo->consultar($ultimoArticuloRevisadoQuery);        $articulo_id = null;        if ((bool) $params->mostraractual) {            $this->insertarUsuarioArticulo($params->mostraractual);            return $params->mostraractual;        }        if (count($ultimoArticuloRevisado) === 0) {            $articuloActualQuery = "select articulo_hito from flujo_articulo                 where flujo_id = " . $flujo_id . "                 order by id limit 1";//            var_dump($articuloActualQuery);            $articuloActual = $this->dbo->consultar($articuloActualQuery);            if (count($articuloActual) > 0) {                $articulo_id = $articuloActual[0]["articulo_hito"];                $this->insertarUsuarioArticulo($articulo_id);            } else {                return false;            }        } else {            $calificacion = (int) $ultimoArticuloRevisado[0]['calificacion'];            $articulo_actual = $ultimoArticuloRevisado[0]["articulo_id"];            //var_dump($calificacion);            if ($calificacion < 60) {                $articulo_id_revisado = $ultimoArticuloRevisado[0]['articulo_id'];                $articuloQuery = "select articulo_hito, sucesor_negativo from flujo_articulo                     where flujo_id = " . $flujo_id . "                     and articulo_hito = " . $articulo_id_revisado . "                    order by articulo_hito";                //echo $articuloQuery;                $articulo = $this->dbo->consultar($articuloQuery);                if (count($articulo) > 0) {                    if (isset($articulo[0]["sucesor_negativo"])) {                        $articulo_id = $articulo[0]["sucesor_negativo"];                        $this->insertarUsuarioArticulo($articulo_id);                    } else {                        $articulo_id = $articulo[0]["articulo_hito"];                    }                } else {                    return false;                }            } else {                $siguienteArticuloQuery = "select sucesor_positivo, sucesor_alternativo from flujo_articulo                     where flujo_id = " . $flujo_id . " and articulo_hito = " . $articulo_actual . " order by fechaRegistro desc limit 1";                $siguienteArticulo = $this->dbo->consultar($siguienteArticuloQuery);                if (count($siguienteArticulo) > 0 && $siguienteArticulo[0]['sucesor_alternativo'] === null) {                    $articulo_id = $siguienteArticulo[0]["sucesor_positivo"];                    $this->insertarUsuarioArticulo($articulo_id);                } else {                    $siguienteArticuloQuery = "select articulo_hito from flujo_articulo                     where flujo_id = " . $flujo_id . " and (sucesor_positivo = " . $articulo_actual . " or sucesor_alternativo = " . $articulo_actual . ") order by fechaRegistro desc limit 1";                    $siguienteArticulo = $this->dbo->consultar($siguienteArticuloQuery);                    $articulo_id = $siguienteArticulo[0]["articulo_hito"];                    $this->insertarUsuarioArticulo($articulo_id);                }            }        }        return $articulo_id;    }    private function inicializarModulosUsuario() {        $perfil = $_SESSION["perfil"];        $usuario_id = $_SESSION["usuario_id"];        $consulta = "select id from usuario_flujo";        $flujosAsociados = $this->dbo->consultar($consulta);        if (count($flujosAsociados) === 0) {            $flujosActivosQuery = "select id from flujo where estado = 'A' and nombre <> 'Sugerencias' and grupo = '" . $perfil . "'";            $flujosActivos = $this->dbo->consultar($flujosActivosQuery);            foreach ($flujosActivos as $flujo) {                $insertarFlujo = "insert into usuario_flujo (                    terminado                    ,usuario_id                    ,flujo_id                    ,porcentaje                                        )                    values (                    0                    ," . $usuario_id . "                    ," . $flujo['id'] . "                    ,0                    )                    ";                $this->dbo->ejecutar($insertarFlujo);            }        }    }    private function convertirModuloAFlujo($modulo) {        $modulo_id = null;        $perfil = $_SESSION["perfil"];        switch ($modulo) {            case "cmdMod_0":                $modulo_id = 1;                break;            case "cmdMod_1":                $modulo_id = 6;                break;            case "cmdMod_2":                $modulo_id = 2;                break;            case "cmdMod_3":                $modulo_id = 3;                break;            case "cmdMod_4":                $modulo_id = 4;                break;            case "cmdMod_7":                $modulo_id = 7;                break;            case "cmdMod_8":                $modulo_id = 8;                break;            case "cmdMod_9":                $modulo_id = 9;                break;            default:                echo "Modulo no encontrado";                break;        }        $flujoQuery = "select id from flujo where modulo_id = " . $modulo_id . " and grupo = '" . $perfil . "' and estado='A'";        $flujo = $this->dbo->consultar($flujoQuery);        return $flujo[0]['id'];    }    private function insertarUsuarioArticulo($articulo_id) {        $usuario_id = $_SESSION["usuario_id"];        $fechaRegistro = date('Y-m-d H:i:s');        $consulta = "insert into usuario_articulo (usuario_id, articulo_id, fechaInicio, fechaRegistro)                            values (" . $usuario_id . ", " . $articulo_id . ", '" . $fechaRegistro . "', '" . $fechaRegistro . "')            ";        $this->dbo->ejecutar($consulta);    }    public function avanzarAction($P) {        $this->dbo->conectar();        $articulo_id = $P['articulo_id'];        $usuario_id = $_SESSION["usuario_id"];        //validar cuestionarios        $cuestionariosQuery = "select id from cuestionario where articulo_id = " . $articulo_id . " and estado='A' order by id desc";        $cuestionarios = $this->dbo->consultar($cuestionariosQuery);        $cuestionariosPendientes = false;        $calificacion = 0;        $articulosExcepcion = [5, 10, 14, 103];        if ($cuestionarios) {            $cuestionarioId = (int) $cuestionarios[0]['id'];            $cuestionarioUsuarioQuery = "select calificacion from usuario_cuestionario where cuestionario_id = " . $cuestionarioId . " and usuario_id = " . $usuario_id . " order by id desc limit 1";            $cuestionarioUsuario = $cuestionarios = $this->dbo->consultar($cuestionarioUsuarioQuery);            if ($cuestionarioUsuario) {                $calificacion = $cuestionarioUsuario[0]['calificacion'];                if ($calificacion < 60 && !in_array((int) $cuestionarioId, $articulosExcepcion)) {                    $cuestionariosPendientes = true;                }  else {                    $cuestionariosPendientes = false;                    if (in_array((int) $cuestionarioId, $articulosExcepcion)) {                        $calificacion = 100;                    }                }            } else {                if (in_array((int) $cuestionarioId, $articulosExcepcion)) {                    $cuestionariosPendientes = false;                    $calificacion = 100;                } else {                    $cuestionariosPendientes = true;                }                            }        } else {            $calificacion = 100;            $cuestionariosPendientes = false;        }        //var_dump($calificacion);        if (!$cuestionariosPendientes) {            $actualizarUsuarioArticuloQuery = "update usuario_articulo set                     calificacion = " . $calificacion . ",                    fechaFinal = '" . date('Y-m-d H:i:s') . "'                where articulo_id = " . $articulo_id . "                 and usuario_id = " . $usuario_id . "                                      ";            $this->dbo->ejecutar($actualizarUsuarioArticuloQuery);        } else {            $this->setResult("Tienes cuestionarios pendientes o con baja calificaciÃ³n.");            return false;        }        $this->setResult(!$cuestionariosPendientes, "data");        $this->dbo->desconectar();        return true;    }    public function terminarPruebaAction($P) {        $this->dbo->conectar();        //var_dump($P);        $respuestas = json_decode($P["respuestas"]);        $esEntrenamiento = (bool) $P["esEntrenamiento"];        $contPreg = 0;        $contOk = 0;        foreach ($respuestas->cuerpo as $respuesta) {            $contOk += $respuesta->rta_validate ? 1 : 0;            $contPreg++;        }        if ($esEntrenamiento) {            $contOk = 10;        }        $fechaRegistro = date("Y-m-d H:i:s");        $calificacion = $contOk * 10;        $usuario_id = $_SESSION["usuario_id"];        $cuestionario_id = $respuestas->id;        $guardarRespuesta = "insert into usuario_cuestionario (fechaRegistro, fechaFinal, calificacion, respuestas, usuario_id, cuestionario_id)            values ('" . $fechaRegistro . "', '" . $fechaRegistro . "',  " . $calificacion . ", '" . $P["respuestas"] . "', " . $usuario_id . ", " . $cuestionario_id . ")            ";        $this->dbo->ejecutar($guardarRespuesta);        $this->setResult($calificacion, "data");        $this->dbo->desconectar();        return true;    }    private function renderizarMenuQuery($p) {        $params = json_decode($p["params"]);        $usuario_id = $_SESSION["usuario_id"];        $flujo_id = $this->convertirModuloAFlujo($params->modulo);//        $articulosVistos = "select art.id, art.nombre from usuario_articulo usar//                                inner join articulo art on art.id = usar.articulo_id//                                inner join flujo flu on art.modulo_id = flu.modulo_id//                                where usar.usuario_id = " . $usuario_id . "//                                and flu.id = " . $flujo_id . "//                                group by usar.articulo_id//                                order by usar.id//                            ";        $articulosVistos = "select art.id, art.nombre, flar.sucesor_positivo from flujo_articulo flar                                inner join articulo art on art.id = flar.articulo_hito                                where flar.flujo_id = " . $flujo_id . "                            ";        return $articulosVistos;    }    public function pruebaDiagnosticaOkAction() {        $this->dbo->conectar();        $usuario_id = $_SESSION["usuario_id"];        $consulta = "select calificacion from usuario_cuestionario                        where usuario_id = " . $usuario_id . "                        and cuestionario_id = 1                        order by id desc limit 1            ";        $response = $this->dbo->consultar($consulta);        if (!isset($response[0]['calificacion']) || (int) $response[0]['calificacion'] < 60) {            $this->setResult(false, "data");        } else {            $this->setResult(true, "data");        }        $this->dbo->desconectar();    }    public function guardarForoAction($P) {        $this->dbo->conectar();        $foroId = $P['foro_id'];        $foroAdjunto = $P['foro_adjunto'];        $foroCalificacion = 100;        $foroTexto = $P['foro_texto'];        $usuario_id = $_SESSION["usuario_id"];        $verificarExistentesQuery = "select id from usuario_foro where usuario_id = " . $usuario_id . " and foro_id=" . $foroId;        $verificarExistentes = $this->dbo->consultar($verificarExistentesQuery);        if (!1) {            $this->setResult("Ya has participado en esta actividad");        } else {            $insertarActividadQuery = "insert into usuario_foro                                         (texto, adjunto, calificacion, fechaRegistro, usuario_id, foro_id)                                        values(                                                '" . $foroTexto . "',                                                '" . $foroAdjunto . "',                                                '" . $foroCalificacion . "',                                                '" . date('Y-m-d H:i:s') . "',                                                " . $usuario_id . ",                                                " . $foroId . "                                               )                                        ";            $this->dbo->ejecutar($insertarActividadQuery);            $this->setResult("Actividad enviada correctamente");        }        $this->dbo->desconectar();    }}